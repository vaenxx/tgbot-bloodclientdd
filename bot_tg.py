import sqlite3
import uuid
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

TOKEN = '7640581037:AAFENvK_guzBTIOo7w0dn7wDmh0Fwbng1c0'
WEBHOOK_URL = 'https://1112-149-34-245-4.ngrok-free.app/bot'  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL ngrok

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bloodclient.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS keys
                    (key TEXT PRIMARY KEY, expiry_date TEXT, login TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS admins
                    (user_id TEXT PRIMARY KEY)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                    (user_id TEXT PRIMARY KEY, key TEXT)''')
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
def generate_key(days):
    key = str(uuid.uuid4())
    expiry_date = (datetime.now() + timedelta(days=days)).strftime("%Y-%m-%d %H:%M:%S")
    conn = sqlite3.connect('bloodclient.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO keys (key, expiry_date) VALUES (?, ?)", (key, expiry_date))
    conn.commit()
    conn.close()
    return key

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id):
    conn = sqlite3.connect('bloodclient.db')
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM admins WHERE user_id = ?", (str(user_id),))
    result = cursor.fetchone()
    conn.close()
    return result is not None

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def add_admin(user_id):
    conn = sqlite3.connect('bloodclient.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO admins (user_id) VALUES (?)", (str(user_id),))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /code ex1
async def code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0] == 'ex1':
        user_id = update.message.from_user.id
        if add_admin(user_id):
            await update.message.reply_text("‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        else:
            await update.message.reply_text("‚ÑπÔ∏è –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /code ex1")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /code ex1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤.")
        return

    keyboard = [
        [InlineKeyboardButton("üíé –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data='generate_key')],
        [InlineKeyboardButton("üóëÔ∏è –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á", callback_data='revoke_key')],
        [InlineKeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π", callback_data='list_keys')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not is_admin(query.from_user.id):
        await query.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /code ex1.")
        return

    if query.data == 'generate_key':
        keyboard = [
            [InlineKeyboardButton("üìÖ 30 –¥–Ω–µ–π", callback_data='generate_30')],
            [InlineKeyboardButton("üìÖ 90 –¥–Ω–µ–π", callback_data='generate_90')],
            [InlineKeyboardButton("‚ôæÔ∏è –ù–∞–≤—Å–µ–≥–¥–∞ (10000 –¥–Ω–µ–π)", callback_data='generate_10000')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:", reply_markup=reply_markup)

    elif query.data.startswith('generate_'):
        days = int(query.data.split('_')[1])
        key = generate_key(days)
        await query.message.reply_text(f"üÜï –ù–æ–≤—ã–π –∫–ª—é—á: `{key}`\n‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π", parse_mode="Markdown")

    elif query.data == 'revoke_key':
        context.user_data['awaiting_key'] = True
        await query.message.reply_text("üóùÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è:")

    elif query.data == 'list_keys':
        conn = sqlite3.connect('bloodclient.db')
        cursor = conn.cursor()
        cursor.execute("SELECT key, login, expiry_date FROM keys")
        keys = cursor.fetchall()
        conn.close()

        if not keys:
            await query.message.reply_text("üì≠ –ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        response = "üìú *–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:*\n\n"
        for key, login, expiry_date in keys:
            status = f"üîó –ü—Ä–∏–≤—è–∑–∞–Ω –∫ {login}" if login else "‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            response += f"üîë `{key}`\n{status}\n‚è≥ –î–æ: {expiry_date}\n\n"
        await query.message.reply_text(response, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.message.from_user.id):
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /code ex1.")
        return

    if context.user_data.get('awaiting_key'):
        key = update.message.text
        conn = sqlite3.connect('bloodclient.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM keys WHERE key = ?", (key,))
        cursor.execute("UPDATE users SET key = NULL WHERE key = ?", (key,))
        conn.commit()
        conn.close()
        await update.message.reply_text(f"üóëÔ∏è –ö–ª—é—á `{key}` –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
        context.user_data['awaiting_key'] = False

def main():
    init_db()
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("code", code))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=8443,
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    main()
